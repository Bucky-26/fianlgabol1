const axios = require("axios");
const fs = require("fs");
const gtts = require('gtts');

module.exports.config = {
  name: "alexa",
  usePrefix: false,
  version: "2.8.8",
  hasPermission: 0,
  credits: "Hazeyy And Arjhil / contrinbute by giee",
  description: "( ùôÇùôãùôè-3.5 ùôèùô™ùôßùôóùô§ )",
  commandCategory: "education",
  usages: "( GPT-3.5 Turbo Without Daily Usage Limit )",
  cooldowns: 3,
};

let lastQuery = "";

module.exports.run = async function({ api, event, args }) {
  const { threadID, messageID } = event;

  if (!args[0]) {
    api.sendMessage("üò∫ ùñØùóÖùñæùñ∫ùóåùñæ ùóâùóãùóàùóèùóÇùñΩùñæ ùñ∫ ùóäùóéùñæùóãùóí ùóçùóà ùóåùñæùñ∫ùóãùñºùóÅ ùóàùóá ùóçùóÅùñæ ùóêùñæùñª", threadID, messageID);
    return;
  }

  const query = args.join(" ");

  if (query === lastQuery) {
    api.sendMessage("üï∞Ô∏è | ùòúùò±ùò•ùò¢ùòµùò¶ùò• ùòàùòØùò¥ùò∏ùò¶ùò≥...", threadID, messageID);
    return;
  } else {
    lastQuery = query;
  }

  api.sendMessage("üïü | ùòöùò¶ùò¢ùò≥ùò§ùò©ùò™ùòØùò®...", threadID, messageID);

  try {
    const response = await axios.get(`https://gpt-35-turbo-hazeyy-api.kyrinwu.repl.co/gpt?msg=${encodeURIComponent(query)}`);

    if (response.status === 200 && response.data && response.data.message) {
      const answer = response.data.message;
      const formattedAnswer = formatFont(answer);

      // Generate voice message using gTTS
      const gttsPath = 'voice.mp3';
      const gttsText = `üìù ùóîùóüùóòùó´ùóî (ùóúùó°ùó©ùó¢ùóúùóñùóò) ${formattedAnswer}`;
      const gttsInstance = new gtts(gttsText, 'en');
      gttsInstance.save(gttsPath, function(error, result) {
        if (error) {
          console.error("Error saving gTTS:", error);
        } else {
          // Send both text and voice together in a single message
          api.sendMessage({
            body: `üìù ùóîùóüùóòùó´ùóî (ùóîùóú)\n\nüìù: ${formattedAnswer}`,
            attachment: fs.createReadStream(gttsPath)
          }, threadID);
        }
      });
    } else {
      api.sendMessage("üòø ùñ≤ùóàùóãùóãùóí, ùóáùóà ùóãùñæùóÖùñæùóèùñ∫ùóáùóç ùñ∫ùóáùóåùóêùñæùóã ùñøùóàùóéùóáùñΩ", threadID, messageID);
    }
  } catch (error) {
    console.error(error);
    api.sendMessage("‚ÄºÔ∏è ùñ†ùóá ùñæùóãùóãùóàùóã ùóàùñºùñºùóéùóãùñæùñâ, ùñ∂ùóÅùóÇùóÖùñæ ùóåùñæùñ∫ùóãùñºùóÅùóÇùóáùóÄ ùóàùóá ùñ≥ùóéùóãùñªùóà", threadID, messageID);
    return;
  }

  // Search Pinterest and send pictures
  const imgData = await searchPinterest(query);

  if (imgData && imgData.length > 0) {
    api.sendMessage({
      body: `Pinterest Search results for keyword: ${query}`,
      attachment: imgData
    }, threadID, messageID);
  } else {
    api.sendMessage("‚ÄºÔ∏è An error occurred while searching on Pinterest or no results found.", threadID, messageID);
  }
};

async function searchPinterest(query) {
  const res = await axios.get(`https://api-dien.kira1011.repl.co/pinterest?search=${encodeURIComponent(query)}`);
  const data = res.data.data;
  var num = 0;
  var imgData = [];
  for (var i = 0; i < 6; i++) {
    let path = __dirname + `/cache/${num += 1}.jpg`;
    let getDown = (await axios.get(`${data[i]}`, { responseType: 'arraybuffer' })).data;
    fs.writeFileSync(path, Buffer.from(getDown, 'utf-8'));
    imgData.push(fs.createReadStream(__dirname + `/cache/${num}.jpg`));
  }
  for (let ii = 1; ii < 6; ii++) {
    fs.unlinkSync(__dirname + `/cache/${ii}.jpg`);
  }
  return imgData;
}

function formatFont(text) {
  const fontMapping = {
    a: "ùñ∫", b: "ùñª", c: "ùñº", d: "ùñΩ", e: "ùñæ", f: "ùñø", g: "ùóÄ", h: "ùóÅ", i: "ùóÇ", j: "ùóÉ", k: "ùóÑ", l: "ùóÖ", m: "ùóÜ",
    n: "ùóá", o: "ùóà", p: "ùóâ", q: "ùóä", r: "ùóã", s: "ùóå", t: "ùóç", u: "ùóé", v: "ùóè", w: "ùóê", x: "ùóë", y: "ùóí", z: "ùóì",
    A: "ùñ†", B: "ùñ°", C: "ùñ¢", D: "ùñ£", E: "ùñ§", F: "ùñ•", G: "ùñ¶", H: "ùñß", I: "ùñ®", J: "ùñ©", K: "ùñ™", L: "ùñ´", M: "ùñ¨",
    N: "ùñ≠", O: "ùñÆ", P: "ùñØ", Q: "ùñ∞", R: "ùñ±", S: "ùñ≤", T: "ùñ≥", U: "ùñ¥", V: "ùñµ", W: "ùñ∂", X: "ùñ∑", Y: "ùñ∏", Z: "ùñπ"
  };

  let formattedText = "";
  for (const char of text) {
    if (char in fontMapping) {
      formattedText += fontMapping[char];
    } else {
      formattedText += char;
    }
  }

  return formattedText;
}
